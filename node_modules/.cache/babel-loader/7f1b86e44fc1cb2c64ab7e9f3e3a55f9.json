{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport * as L from \"leaflet\";\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(awesomeMap, component) {\n    _classCallCheck(this, Controller);\n\n    this.awesomeMap = awesomeMap;\n    this.component = component;\n    this.templateId = \"marker-meeting-popup\";\n    this.controls = {\n      label: this.getLabel(),\n      group: new L.FeatureGroup.SubGroup(this.awesomeMap.cluster)\n    };\n\n    this.onFinished = function () {};\n\n    this.allNodes = [];\n  }\n\n  _createClass(Controller, [{\n    key: \"getLabel\",\n    value: function getLabel() {\n      var text = this.awesomeMap.config.menu.mergeComponents || !this.component.name ? window.DecidimAwesome.texts[this.component.type] : this.component.name;\n      return \"<span class=\\\"awesome_map-component\\\" id=\\\"awesome_map-component_\".concat(this.component.id, \"\\\" title=\\\"0\\\" data-layer=\\\"\").concat(this.component.type, \"\\\">\").concat(text, \"</span>\");\n    }\n  }, {\n    key: \"setFetcher\",\n    value: function setFetcher(Fetcher) {\n      var _this = this;\n\n      this.fetcher = new Fetcher(this);\n\n      this.fetcher.onFinished = function () {\n        // console.log(`all ${this.component.type} loaded`, this)\n        _this._onFinished();\n      };\n\n      this.fetcher.onCollection = function (collection) {\n        if (collection && collection.edges) {\n          // Add markers to the main cluster group\n          try {\n            _this.awesomeMap.cluster.addLayers(collection.edges.map(function (item) {\n              return item.node.marker;\n            }));\n          } catch (e) {\n            console.error(\"Failed marker collection assignation\", collection);\n          } // subgroups don't have th addLayers utility\n\n\n          collection.edges.forEach(function (item) {\n            _this.addMarkerCategory(item.node.marker, item.node.category);\n\n            _this.addMarkerHashtags(item.node.marker, item.node.hashtags);\n          });\n        }\n      };\n    }\n  }, {\n    key: \"addControls\",\n    value: function addControls() {\n      this.awesomeMap.controls.main.addOverlay(this.controls.group, this.controls.label);\n      this.awesomeMap.map.addLayer(this.controls.group);\n    }\n  }, {\n    key: \"loadNodes\",\n    value: function loadNodes() {// to override\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker, node) {\n      var _this2 = this;\n      /* \n      theorically, this should be enough to create popups on markers but it looks that\n      there is some bug in leaflet that sometimes prevents this to work\n      */\n\n      /*\n      let dom = document.createElement(\"div\");\n      // console.log(\"addMarker\", marker, \"dom\", dom)\n      dom.innerHTML = $.templates(`#${this.templateId}`).render(node);\n      marker.bindPopup(dom, {\n        maxwidth: 640,\n        minWidth: 500,\n        keepInView: true,\n        className: \"map-info\"\n      }); //*/\n\n\n      marker.on(\"click\", function () {\n        var dom = document.createElement(\"div\");\n        dom.innerHTML = $.templates(\"#\".concat(_this2.templateId)).render(node);\n        var pop = L.popup({\n          maxwidth: 640,\n          minWidth: 500,\n          keepInView: true,\n          className: \"map-info\"\n        }).setLatLng(marker.getLatLng()).setContent(dom);\n\n        _this2.awesomeMap.map.addLayer(pop);\n      });\n      node.marker = marker;\n      node.component = this.component;\n      this.allNodes.push(node);\n    }\n  }, {\n    key: \"addMarkerCategory\",\n    value: function addMarkerCategory(marker, category) {\n      // Add to category layer\n      var cat = this.awesomeMap.getCategory(category);\n\n      if (this.awesomeMap.layers[cat.id]) {\n        try {\n          this.awesomeMap.layers[cat.id].group.addLayer(marker);\n          this.awesomeMap.controls.showCategory(cat);\n        } catch (e) {\n          console.error(\"Failed category marker assignation\", marker, e.message);\n        }\n      }\n    }\n  }, {\n    key: \"addMarkerHashtags\",\n    value: function addMarkerHashtags(marker, hashtags) {\n      // Add hashtag layer\n      if (this.awesomeMap.config.menu.hashtags) {\n        try {\n          this.awesomeMap.controls.addHashtagsControls(hashtags, marker);\n        } catch (e) {\n          console.error(\"Failed hashtags marker assignation\", marker, e.message);\n        }\n      }\n    } // Override if needed (call this.onFinished() at the end!)\n\n  }, {\n    key: \"_onFinished\",\n    value: function _onFinished() {\n      this.awesomeMap.controls.updateStats(\"component_\".concat(this.component.id), this.allNodes.length);\n      this.onFinished();\n    }\n  }, {\n    key: \"createIcon\",\n    value: function createIcon(Builder, color) {\n      return new Builder({\n        color: \"#000000\",\n        fillColor: color,\n        circleFillColor: color,\n        weight: 1,\n        stroke: color,\n        fillOpacity: 0.9\n      });\n    }\n  }]);\n\n  return Controller;\n}();\n\nexport { Controller as default };","map":{"version":3,"mappings":"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","names":["L","Controller","awesomeMap","component","_classCallCheck","templateId","controls","label","getLabel","group","FeatureGroup","SubGroup","cluster","onFinished","allNodes","text","config","menu","mergeComponents","name","window","DecidimAwesome","texts","type","id","Fetcher","fetcher","_this","_onFinished","onCollection","collection","edges","addLayers","map","item","node","marker","e","console","error","forEach","addMarkerCategory","category","addMarkerHashtags","hashtags","main","addOverlay","addLayer","on","dom","document","createElement","innerHTML","$","templates","_this2","render","pop","popup","maxwidth","minWidth","keepInView","className","setLatLng","getLatLng","setContent","push","cat","getCategory","layers","showCategory","message","addHashtagsControls","updateStats","length","Builder","color","fillColor","circleFillColor","weight","stroke","fillOpacity"],"sources":["/home/injam/.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/gems/decidim-decidim_awesome-0.8.3/app/packs/src/decidim/decidim_awesome/awesome_map/controllers/controller.js"],"sourcesContent":["import * as L from \"leaflet\";\n\nexport default class Controller {\n  constructor(awesomeMap, component) {\n    this.awesomeMap = awesomeMap;\n    this.component = component;\n    this.templateId = \"marker-meeting-popup\";\n    this.controls = {\n      label: this.getLabel(),\n      group: new L.FeatureGroup.SubGroup(this.awesomeMap.cluster)\n    };\n    this.onFinished = () => {};\n    this.allNodes = [];\n  }\n\n  getLabel() {\n    let text = this.awesomeMap.config.menu.mergeComponents || !this.component.name \n      ? window.DecidimAwesome.texts[this.component.type]\n      : this.component.name;\n    return `<span class=\"awesome_map-component\" id=\"awesome_map-component_${this.component.id}\" title=\"0\" data-layer=\"${this.component.type}\">${text}</span>`\n  }\n\n  setFetcher(Fetcher) {\n    this.fetcher = new Fetcher(this);\n    this.fetcher.onFinished = () => {\n      // console.log(`all ${this.component.type} loaded`, this)\n      this._onFinished();\n    };\n    this.fetcher.onCollection = (collection) =>  {\n      if (collection && collection.edges)  { \n        // Add markers to the main cluster group\n        try {\n          this.awesomeMap.cluster.addLayers(collection.edges.map((item) => item.node.marker));\n        } catch (e) {\n          console.error(\"Failed marker collection assignation\", collection);\n        }\n        // subgroups don't have th addLayers utility\n        collection.edges.forEach((item) => {\n          this.addMarkerCategory(item.node.marker, item.node.category);\n          this.addMarkerHashtags(item.node.marker, item.node.hashtags);\n        });\n      }\n    };\n  }\n\n  addControls() {\n    this.awesomeMap.controls.main.addOverlay(this.controls.group, this.controls.label);\n    this.awesomeMap.map.addLayer(this.controls.group);\n  }\n\n  loadNodes() {\n    // to override\n  }\n\n  addMarker(marker, node) {\n\n    /* \n    theorically, this should be enough to create popups on markers but it looks that\n    there is some bug in leaflet that sometimes prevents this to work\n    */\n    /*\n    let dom = document.createElement(\"div\");\n    // console.log(\"addMarker\", marker, \"dom\", dom)\n    dom.innerHTML = $.templates(`#${this.templateId}`).render(node);\n    marker.bindPopup(dom, {\n      maxwidth: 640,\n      minWidth: 500,\n      keepInView: true,\n      className: \"map-info\"\n    }); //*/\n\n    marker.on(\"click\", () => {\n      let dom = document.createElement(\"div\");\n      dom.innerHTML = $.templates(`#${this.templateId}`).render(node);\n\n      let pop = L.popup({\n        maxwidth: 640,\n        minWidth: 500,\n        keepInView: true,\n        className: \"map-info\"\n\n      }).setLatLng(marker.getLatLng()).setContent(dom);\n      this.awesomeMap.map.addLayer(pop);\n    });\n    node.marker = marker;\n    node.component = this.component;\n    this.allNodes.push(node);\n  }\n\n  addMarkerCategory(marker, category) {\n    // Add to category layer\n    const cat = this.awesomeMap.getCategory(category);\n    if (this.awesomeMap.layers[cat.id]) {\n      try {\n        this.awesomeMap.layers[cat.id].group.addLayer(marker);\n        this.awesomeMap.controls.showCategory(cat);\n      } catch (e) {\n        console.error(\"Failed category marker assignation\", marker, e.message);\n      }\n    }   \n  }\n\n  addMarkerHashtags(marker, hashtags) {\n    // Add hashtag layer\n    if (this.awesomeMap.config.menu.hashtags) {\n      try {\n        this.awesomeMap.controls.addHashtagsControls(hashtags, marker);\n      } catch (e) {\n        console.error(\"Failed hashtags marker assignation\", marker, e.message);\n      }\n    }\n  }\n\n  // Override if needed (call this.onFinished() at the end!)\n  _onFinished() {\n    this.awesomeMap.controls.updateStats(`component_${this.component.id}`, this.allNodes.length);\n    this.onFinished();\n  }\n\n  createIcon(Builder, color) {\n    return new Builder({\n      color: \"#000000\",\n      fillColor: color,\n      circleFillColor: color,\n      weight: 1,\n      stroke: color,\n      fillOpacity: 0.9\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}