{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nrequire(\"formBuilder/dist/form-render.min.js\");\n\nimport \"src/decidim/decidim_awesome/forms/rich_text_plugin\";\n\nvar CustomFieldsRenderer = /*#__PURE__*/function () {\n  // eslint-disable-line no-unused-vars\n  function CustomFieldsRenderer(container_selector) {\n    _classCallCheck(this, CustomFieldsRenderer);\n\n    this.container_selector = container_selector || \".proposal_custom_field:last\";\n    this.lang = this.getLang($(\"html\").attr(\"lang\"));\n  }\n\n  _createClass(CustomFieldsRenderer, [{\n    key: \"getLang\",\n    value: function getLang(lang) {\n      var langs = {\n        // ar: 'ar-SA', // Not in decidim yet\n        \"ar\": \"ar-TN\",\n        \"ca\": \"ca-ES\",\n        \"cs\": \"cs-CZ\",\n        \"da\": \"da-DK\",\n        \"de\": \"de-DE\",\n        \"el\": \"el-GR\",\n        \"en\": \"en-US\",\n        \"es\": \"es-ES\",\n        \"fa\": \"fa-IR\",\n        \"fi\": \"fi-FI\",\n        \"fr\": \"fr-FR\",\n        \"he\": \"he-IL\",\n        \"hu\": \"hu-HU\",\n        \"it\": \"it-IT\",\n        \"ja\": \"ja-JP\",\n        \"my\": \"my-MM\",\n        \"nb\": \"nb-NO\",\n        \"nl\": \"nl-NL\",\n        \"pl\": \"pl-PL\",\n        \"pt\": \"pt-BR\",\n        \"qz\": \"qz-MM\",\n        \"ro\": \"ro-RO\",\n        \"ru\": \"ru-RU\",\n        \"sl\": \"sl-SI\",\n        \"th\": \"th-TH\",\n        \"tr\": \"tr-TR\",\n        \"uk\": \"uk-UA\",\n        \"vi\": \"vi-VN\",\n        \"zh-TW\": \"zh-TW\",\n        \"zh\": \"zh-CN\"\n      };\n\n      if (langs[lang]) {\n        return langs[lang];\n      }\n\n      if (langs[lang.substr(0, 2)]) {\n        return langs[lang.substr(0, 2)];\n      }\n\n      return \"en-US\";\n    }\n    /*\n    * Creates an XML document with a subset of html-compatible dl/dd/dt elements\n    * to store the custom fields answers\n    */\n\n  }, {\n    key: \"dataToXML\",\n    value: function dataToXML(data) {\n      var $dl = $(\"<dl/>\");\n      var $dd, $div, $dt, key, l, label, text, val;\n      $dl.attr(\"class\", \"decidim_awesome-custom_fields\");\n      $dl.attr(\"data-generator\", \"decidim_awesome\");\n      $dl.attr(\"data-version\", window.DecidimAwesome.version);\n\n      for (key in data) {\n        // console.log(\"get the data!\", key, data[key]);\n        // Richtext plugin does not saves userdata, so we get it from the hidden input\n        if (data[key].type == \"textarea\" && data[key].subtype == \"richtext\") {\n          data[key].userData = [$(\"#\".concat(data[key].name, \"-input\")).val()];\n        }\n\n        if (data[key].userData && data[key].userData.length) {\n          $dt = $(\"<dt/>\");\n          $dt.text(data[key].label);\n          $dt.attr(\"name\", data[key].name);\n          $dd = $(\"<dd/>\"); // console.log(\"data for\", key, data[key].name, data[key])\n\n          for (val in data[key].userData) {\n            $div = $(\"<div/>\");\n            label = data[key].userData[val];\n            text = null;\n\n            if (data[key].values) {\n              l = data[key].values.find(function (v) {\n                return v.value == label;\n              });\n\n              if (l) {\n                text = label;\n                label = l.label;\n              }\n            } else if (data[key].type == \"date\" && label) {\n              l = new Date(label).toLocaleDateString();\n\n              if (l) {\n                text = label;\n                label = l;\n              }\n            } // console.log(\"userData\", text, \"label\", label, 'key', key, 'data', data)\n\n\n            if (data[key].type == \"textarea\" && data[key].subtype == \"richtext\") {\n              $div.html(label);\n            } else {\n              $div.text(label);\n            }\n\n            if (text) {\n              $div.attr(\"alt\", text);\n            }\n\n            $dd.append($div);\n          }\n\n          $dd.attr(\"id\", data[key].name);\n          $dd.attr(\"name\", data[key].type);\n          $dl.append($dt);\n          $dl.append($dd);\n        }\n      }\n\n      return \"<xml>\".concat($dl[0].outerHTML, \"</xml>\");\n    }\n  }, {\n    key: \"fixBuggyFields\",\n    value: function fixBuggyFields() {\n      var _this = this;\n\n      if (!this.$container) {\n        return false;\n      }\n      /**\n      * Hack to fix required checkboxes being reset\n      * Issue: https://github.com/Platoniq/decidim-module-decidim_awesome/issues/82\n      */\n\n\n      this.$container.find(\".formbuilder-checkbox-group\").each(function (_key, group) {\n        var inputs = $(\".formbuilder-checkbox input\", group);\n\n        var data = _this.spec.find(function (a) {\n          return a.type == \"checkbox-group\";\n        });\n\n        var values = data.userData;\n\n        if (!inputs.length || !data || !values) {\n          return;\n        }\n\n        inputs.each(function (_idx, input) {\n          var index = values.indexOf(input.value);\n\n          if (index >= 0) {\n            values.splice(index, 1); // setting checked=true do not makes the browser aware that the form is valid if the field is required\n\n            if (!input.checked) {\n              $(input).click();\n            }\n          } else if (input.checked) {\n            $(input).click();\n          }\n        }); // Fill \"other\" option\n\n        var other_option = $(\".other-option\", inputs.parent())[0];\n        var other_val = $(\".other-val\", inputs.parent())[0];\n        var other_text = values.join(\" \");\n\n        if (other_option) {\n          if (other_text) {\n            other_option.checked = true;\n            other_option.value = other_text;\n            other_val.value = other_text;\n          } else {\n            other_option.checked = false;\n            other_option.value = \"\";\n            other_val.value = \"\";\n          }\n        }\n      });\n      /**\n      * Hack to fix required radio buttons \"other\" value\n      * Issue: https://github.com/Platoniq/decidim-module-decidim_awesome/issues/133\n      */\n\n      this.$container.find(\".formbuilder-radio input.other-val\").on(\"input\", function (input) {\n        var $input = $(input.currentTarget);\n        var $group = $input.closest(\".formbuilder-radio-group\");\n        $group.find(\"input\").each(function (_key, radio) {\n          var name = $(radio).attr(\"name\");\n\n          if (name && name.endsWith(\"[]\")) {\n            $(radio).attr(\"name\", name.slice(0, -2));\n          }\n        });\n      });\n    } // Saves xml to the hidden input\n\n  }, {\n    key: \"storeData\",\n    value: function storeData() {\n      if (!this.$container) {\n        return false;\n      }\n\n      var $form = this.$container.closest(\"form\");\n      var $body = $form.find(\"input[name=\\\"\".concat(this.$element.data(\"name\"), \"\\\"]\"));\n\n      if ($body.length && this.instance) {\n        this.spec = this.instance.userData;\n        $body.val(this.dataToXML(this.spec));\n        this.$element.data(\"spec\", this.spec);\n      } // console.log(\"storeData spec\", this.spec, \"$body\", $body,\"$form\",$form,\"this\",this);\n\n    }\n  }, {\n    key: \"init\",\n    value: function init($element) {\n      this.$element = $element;\n      this.spec = $element.data(\"spec\");\n\n      if (!this.$container) {\n        this.$container = $(this.container_selector);\n      } // console.log(\"init\", $element, \"this\", this)\n      // always use the last field (in case of multilang tabs we only render one form due a limitation of the library to handle several instances)\n\n\n      this.instance = this.$container.formRender({\n        i18n: {\n          locale: this.lang,\n          location: \"https://cdn.jsdelivr.net/npm/formbuilder-languages@1.1.0/\"\n        },\n        formData: this.spec,\n        render: true\n      });\n      this.fixBuggyFields();\n    }\n  }]);\n\n  return CustomFieldsRenderer;\n}();\n\nexport { CustomFieldsRenderer as default };","map":{"version":3,"mappings":"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","names":["require","CustomFieldsRenderer","container_selector","_classCallCheck","lang","getLang","$","attr","langs","substr","data","$dl","$dd","$div","$dt","key","l","label","text","val","window","DecidimAwesome","version","type","subtype","userData","name","length","values","find","v","value","Date","toLocaleDateString","html","append","outerHTML","$container","each","_key","group","inputs","_this","spec","a","_idx","input","index","indexOf","splice","checked","click","other_option","parent","other_val","other_text","join","on","$input","currentTarget","$group","closest","radio","endsWith","slice","$form","$body","$element","instance","dataToXML","formRender","i18n","locale","location","formData","render","fixBuggyFields"],"sources":["/home/injam/.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/gems/decidim-decidim_awesome-0.8.3/app/packs/src/decidim/decidim_awesome/forms/custom_fields_renderer.js"],"sourcesContent":["require(\"formBuilder/dist/form-render.min.js\")\nimport \"src/decidim/decidim_awesome/forms/rich_text_plugin\"\n\nexport default class CustomFieldsRenderer { // eslint-disable-line no-unused-vars\n  constructor(container_selector) {\n    this.container_selector = container_selector || \".proposal_custom_field:last\";\n    this.lang = this.getLang($(\"html\").attr(\"lang\"));\n  }\n\n  getLang(lang) {\n    const langs = {\n      // ar: 'ar-SA', // Not in decidim yet\n      \"ar\": \"ar-TN\",\n      \"ca\": \"ca-ES\",\n      \"cs\": \"cs-CZ\",\n      \"da\": \"da-DK\",\n      \"de\": \"de-DE\",\n      \"el\": \"el-GR\",\n      \"en\": \"en-US\",\n      \"es\": \"es-ES\",\n      \"fa\": \"fa-IR\",\n      \"fi\": \"fi-FI\",\n      \"fr\": \"fr-FR\",\n      \"he\": \"he-IL\",\n      \"hu\": \"hu-HU\",\n      \"it\": \"it-IT\",\n      \"ja\": \"ja-JP\",\n      \"my\": \"my-MM\",\n      \"nb\": \"nb-NO\",\n      \"nl\": \"nl-NL\",\n      \"pl\": \"pl-PL\",\n      \"pt\": \"pt-BR\",\n      \"qz\": \"qz-MM\",\n      \"ro\": \"ro-RO\",\n      \"ru\": \"ru-RU\",\n      \"sl\": \"sl-SI\",\n      \"th\": \"th-TH\",\n      \"tr\": \"tr-TR\",\n      \"uk\": \"uk-UA\",\n      \"vi\": \"vi-VN\",\n      \"zh-TW\": \"zh-TW\",\n      \"zh\": \"zh-CN\"\n    };\n    if (langs[lang]) {\n      return langs[lang];\n    }\n    if (langs[lang.substr(0, 2)]) {\n      return langs[lang.substr(0, 2)];\n    }\n    return \"en-US\";\n  }\n\n  /*\n  * Creates an XML document with a subset of html-compatible dl/dd/dt elements\n  * to store the custom fields answers\n  */\n  dataToXML(data) {\n    const $dl = $(\"<dl/>\");\n    let $dd, $div, $dt, key, l, label, text, val;\n    $dl.attr(\"class\", \"decidim_awesome-custom_fields\");\n    $dl.attr(\"data-generator\", \"decidim_awesome\");\n    $dl.attr(\"data-version\", window.DecidimAwesome.version);\n    for (key in data) {\n      // console.log(\"get the data!\", key, data[key]);\n      // Richtext plugin does not saves userdata, so we get it from the hidden input\n      if (data[key].type == \"textarea\" && data[key].subtype == \"richtext\") {\n        data[key].userData = [$(`#${data[key].name}-input`).val()];\n      }\n      if (data[key].userData && data[key].userData.length) {\n        $dt = $(\"<dt/>\");\n        $dt.text(data[key].label);\n        $dt.attr(\"name\", data[key].name);\n        $dd = $(\"<dd/>\");\n        // console.log(\"data for\", key, data[key].name, data[key])\n        for (val in data[key].userData) {\n          $div = $(\"<div/>\");\n          label = data[key].userData[val];\n          text = null;\n          if (data[key].values) {\n            l = data[key].values.find((v) => v.value == label);\n            if (l) {\n              text = label;\n              label = l.label;\n            }\n          } else if (data[key].type == \"date\" && label) {\n            l = new Date(label).toLocaleDateString();\n            if (l) {\n              text = label;\n              label = l;\n            }\n          }\n          // console.log(\"userData\", text, \"label\", label, 'key', key, 'data', data)\n          if (data[key].type == \"textarea\" && data[key].subtype == \"richtext\") {\n            $div.html(label);\n          } else {\n            $div.text(label);\n          }\n          if (text) {\n            $div.attr(\"alt\", text);\n          }\n          $dd.append($div);\n        }\n        $dd.attr(\"id\", data[key].name);\n        $dd.attr(\"name\", data[key].type);\n        $dl.append($dt);\n        $dl.append($dd);\n      }\n    }\n    return `<xml>${$dl[0].outerHTML}</xml>`;\n  }\n\n  fixBuggyFields() {\n    if (!this.$container) {\n      return false;\n    }\n\n    /**\n    * Hack to fix required checkboxes being reset\n    * Issue: https://github.com/Platoniq/decidim-module-decidim_awesome/issues/82\n    */\n    this.$container.find(\".formbuilder-checkbox-group\").each((_key, group) => {\n      const inputs = $(\".formbuilder-checkbox input\", group);\n      const data = this.spec.find((a) => a.type == \"checkbox-group\");\n      let values = data.userData;\n      if (!inputs.length || !data || !values) {\n        return;\n      }\n\n      inputs.each((_idx, input) => {\n        let index = values.indexOf(input.value);\n        if (index >= 0) {\n          values.splice(index, 1)\n          // setting checked=true do not makes the browser aware that the form is valid if the field is required\n          if (!input.checked)\n          {$(input).click();}\n        } else if (input.checked)\n        {$(input).click();}\n      });\n\n      // Fill \"other\" option\n      const other_option = $(\".other-option\", inputs.parent())[0];\n      const other_val = $(\".other-val\", inputs.parent())[0];\n      const other_text = values.join(\" \");\n\n      if (other_option) {\n        if (other_text) {\n          other_option.checked = true;\n          other_option.value = other_text;\n          other_val.value = other_text;\n        } else {\n          other_option.checked = false;\n          other_option.value = \"\";\n          other_val.value = \"\";\n        }\n      }\n    });\n\n    /**\n    * Hack to fix required radio buttons \"other\" value\n    * Issue: https://github.com/Platoniq/decidim-module-decidim_awesome/issues/133\n    */\n    this.$container.find(\".formbuilder-radio input.other-val\").on(\"input\", (input) => {\n      const $input = $(input.currentTarget);\n      const $group = $input.closest(\".formbuilder-radio-group\");\n      $group.find(\"input\").each((_key, radio) => {\n        const name = $(radio).attr(\"name\");\n        if (name && name.endsWith(\"[]\")) {\n          $(radio).attr(\"name\", name.slice(0, -2));\n        }\n      });\n    });\n  }\n\n  // Saves xml to the hidden input\n  storeData() {\n    if (!this.$container) {\n      return false;\n    }\n    const $form = this.$container.closest(\"form\");\n    const $body = $form.find(`input[name=\"${this.$element.data(\"name\")}\"]`);\n    if ($body.length && this.instance) {\n      this.spec = this.instance.userData;\n      $body.val(this.dataToXML(this.spec));\n      this.$element.data(\"spec\", this.spec);\n    }\n    // console.log(\"storeData spec\", this.spec, \"$body\", $body,\"$form\",$form,\"this\",this);\n  }\n\n  init($element) {\n    this.$element = $element;\n    this.spec = $element.data(\"spec\");\n    if (!this.$container) {\n      this.$container = $(this.container_selector);\n    }\n    // console.log(\"init\", $element, \"this\", this)\n    // always use the last field (in case of multilang tabs we only render one form due a limitation of the library to handle several instances)\n    this.instance = this.$container.formRender({\n      i18n: {\n        locale: this.lang,\n        location: \"https://cdn.jsdelivr.net/npm/formbuilder-languages@1.1.0/\"\n      },\n      formData: this.spec,\n      render: true\n    });\n    this.fixBuggyFields();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}