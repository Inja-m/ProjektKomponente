{"ast":null,"code":"import Tribute from \"src/decidim/vendor/tribute\";\n$(function () {\n  $(\"[data-decidim-geocoding]\").each(function (_i, el) {\n    var $input = $(el);\n    var $fieldContainer = $input.parent();\n    $fieldContainer.addClass(\"has-tribute\");\n    var tribute = new Tribute({\n      autocompleteMode: true,\n      // autocompleteSeparator: / \\+ /, // See below, requires Tribute update\n      allowSpaces: true,\n      positionMenu: false,\n      replaceTextSuffix: \"\",\n      menuContainer: $fieldContainer.get(0),\n      noMatchTemplate: null,\n      values: function values(text, cb) {\n        $input.trigger(\"geocoder-suggest.decidim\", [text, cb]);\n      }\n    }); // Port https://github.com/zurb/tribute/pull/406\n    // This changes the autocomplete separator from space to \" + \" so that\n    // we can do searches such as \"streetname 4\" including a space. Otherwise\n    // this would do two separate searches for \"streetname\" and \"4\".\n\n    tribute.range.getLastWordInText = function (text) {\n      var _final = text.replace(/\\u00A0/g, \" \");\n\n      var wordsArray = _final.split(/ \\+ /);\n\n      var worldsCount = wordsArray.length - 1;\n      return wordsArray[worldsCount].trim();\n    };\n\n    tribute.attach($input.get(0));\n    $input.on(\"tribute-replaced\", function (ev) {\n      var selectedItem = ev.detail.item.original;\n      $input.trigger(\"geocoder-suggest-select.decidim\", [selectedItem]); // Not all geocoding autocomplete APIs include the coordinates in the\n      // suggestions response. Therefore, some APIs may require additional\n      // query for the coordinates, which should trigger this event for the\n      // input element.\n\n      if (selectedItem.coordinates) {\n        $input.trigger(\"geocoder-suggest-coordinates.decidim\", [selectedItem.coordinates]);\n      }\n    });\n    $input.data(\"geocoder-tribute\", tribute);\n  });\n});","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,4BAApB;AAEAC,CAAC,CAAC,YAAM;EACNA,CAAC,CAAC,0BAAD,CAADA,CAA8BC,IAA9BD,CAAmC,UAACE,EAAD,EAAKC,EAAL,EAAY;IAC7C,IAAMC,MAAM,GAAGJ,CAAC,CAACG,EAAD,CAAhB;IACA,IAAME,eAAe,GAAGD,MAAM,CAACE,MAAPF,EAAxB;IAEAC,eAAe,CAACE,QAAhBF,CAAyB,aAAzBA;IAEA,IAAMG,OAAO,GAAG,IAAIT,OAAJ,CACd;MACEU,gBAAgB,EAAE,IADpB;MAEE;MACAC,WAAW,EAAE,IAHf;MAIEC,YAAY,EAAE,KAJhB;MAKEC,iBAAiB,EAAE,EALrB;MAMEC,aAAa,EAAER,eAAe,CAACS,GAAhBT,CAAoB,CAApBA,CANjB;MAOEU,eAAe,EAAE,IAPnB;MAQEC,MAAM,EAAE,gBAACC,IAAD,EAAOC,EAAP,EAAc;QACpBd,MAAM,CAACe,OAAPf,CAAe,0BAAfA,EAA2C,CAACa,IAAD,EAAOC,EAAP,CAA3Cd;MACD;IAVH,CADc,CAAhB,CAN6C,CAqB7C;IACA;IACA;IACA;;IACAI,OAAO,CAACY,KAARZ,CAAca,iBAAdb,GAAkC,UAACS,IAAD,EAAU;MAC1C,IAAMK,MAAK,GAAGL,IAAI,CAACM,OAALN,CAAa,SAAbA,EAAwB,GAAxBA,CAAd;;MACA,IAAMO,UAAU,GAAGF,MAAK,CAACG,KAANH,CAAY,MAAZA,CAAnB;;MACA,IAAMI,WAAW,GAAGF,UAAU,CAACG,MAAXH,GAAoB,CAAxC;MAEA,OAAOA,UAAU,CAACE,WAAD,CAAVF,CAAwBI,IAAxBJ,EAAP;IALF;;IAQAhB,OAAO,CAACqB,MAARrB,CAAeJ,MAAM,CAACU,GAAPV,CAAW,CAAXA,CAAfI;IAEAJ,MAAM,CAAC0B,EAAP1B,CAAU,kBAAVA,EAA8B,UAAS2B,EAAT,EAAa;MACzC,IAAMC,YAAY,GAAGD,EAAE,CAACE,MAAHF,CAAUG,IAAVH,CAAeI,QAApC;MACA/B,MAAM,CAACe,OAAPf,CAAe,iCAAfA,EAAkD,CAAC4B,YAAD,CAAlD5B,EAFyC,CAIzC;MACA;MACA;MACA;;MACA,IAAI4B,YAAY,CAACI,WAAjB,EAA8B;QAC5BhC,MAAM,CAACe,OAAPf,CAAe,sCAAfA,EAAuD,CAAC4B,YAAY,CAACI,WAAd,CAAvDhC;MACD;IAVH;IAaAA,MAAM,CAACiC,IAAPjC,CAAY,kBAAZA,EAAgCI,OAAhCJ;EAhDF;AADD,EAADJ","names":["Tribute","$","each","_i","el","$input","$fieldContainer","parent","addClass","tribute","autocompleteMode","allowSpaces","positionMenu","replaceTextSuffix","menuContainer","get","noMatchTemplate","values","text","cb","trigger","range","getLastWordInText","final","replace","wordsArray","split","worldsCount","length","trim","attach","on","ev","selectedItem","detail","item","original","coordinates","data"],"sources":["/home/injam/.rbenv/versions/2.7.5/lib/ruby/gems/2.7.0/gems/decidim-core-0.26.2/app/packs/src/decidim/geocoding.js"],"sourcesContent":["import Tribute from \"src/decidim/vendor/tribute\"\n\n$(() => {\n  $(\"[data-decidim-geocoding]\").each((_i, el) => {\n    const $input = $(el);\n    const $fieldContainer = $input.parent();\n\n    $fieldContainer.addClass(\"has-tribute\");\n\n    const tribute = new Tribute(\n      {\n        autocompleteMode: true,\n        // autocompleteSeparator: / \\+ /, // See below, requires Tribute update\n        allowSpaces: true,\n        positionMenu: false,\n        replaceTextSuffix: \"\",\n        menuContainer: $fieldContainer.get(0),\n        noMatchTemplate: null,\n        values: (text, cb) => {\n          $input.trigger(\"geocoder-suggest.decidim\", [text, cb]);\n        }\n      }\n    );\n\n    // Port https://github.com/zurb/tribute/pull/406\n    // This changes the autocomplete separator from space to \" + \" so that\n    // we can do searches such as \"streetname 4\" including a space. Otherwise\n    // this would do two separate searches for \"streetname\" and \"4\".\n    tribute.range.getLastWordInText = (text) => {\n      const final = text.replace(/\\u00A0/g, \" \");\n      const wordsArray = final.split(/ \\+ /);\n      const worldsCount = wordsArray.length - 1;\n\n      return wordsArray[worldsCount].trim();\n    };\n\n    tribute.attach($input.get(0));\n\n    $input.on(\"tribute-replaced\", function(ev) {\n      const selectedItem = ev.detail.item.original;\n      $input.trigger(\"geocoder-suggest-select.decidim\", [selectedItem]);\n\n      // Not all geocoding autocomplete APIs include the coordinates in the\n      // suggestions response. Therefore, some APIs may require additional\n      // query for the coordinates, which should trigger this event for the\n      // input element.\n      if (selectedItem.coordinates) {\n        $input.trigger(\"geocoder-suggest-coordinates.decidim\", [selectedItem.coordinates]);\n      }\n    });\n\n    $input.data(\"geocoder-tribute\", tribute);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}